# Simplified MIPSEL Makefile - Works around OpenSSL issues
# This version uses a workaround for cross-compilation SSL issues

CROSS_COMPILE = mipsel-linux-gnu-
CC = $(CROSS_COMPILE)gcc
AR = $(CROSS_COMPILE)ar  
STRIP = $(CROSS_COMPILE)strip

# Architecture flags
ARCH_FLAGS = -march=mips32r2

# Compilation flags - ignore SSL header issues
CFLAGS = -Wall -Wextra -std=c99 -Os $(ARCH_FLAGS) \
         -D_GNU_SOURCE -D_POSIX_C_SOURCE=200809L \
         -I. -I./lib \
         -Wno-implicit-function-declaration

# Try to find OpenSSL for MIPSEL, fallback to stub
OPENSSL_INC = $(shell find /usr -name "openssl" -type d 2>/dev/null | grep -i mipsel | head -1)
ifneq ($(OPENSSL_INC),)
    CFLAGS += -I$(dir $(OPENSSL_INC))
else
    CFLAGS += -DNO_SSL_AVAILABLE
endif

# Linker flags  
LDFLAGS = -Wl,--gc-sections

# Libraries - try with SSL, fallback without
LIBS = -lpthread -ldl
LIBS_WITH_SSL = -lssl -lcrypto -lpthread -ldl

# Source files
LIBDIR = lib
LIB_SOURCES = $(LIBDIR)/json.c \
              $(LIBDIR)/cloudflare_utils.c \
              $(LIBDIR)/socket_http.c \
              $(LIBDIR)/publicip.c \
              $(LIBDIR)/getip.c \
              $(LIBDIR)/setip.c

LIB_OBJECTS = $(LIB_SOURCES:.c=.o)

PROGRAMS = cloudflare_renew tools/getip tools/setip tools/publicip

.PHONY: all clean prep ssl-stub

all: prep $(PROGRAMS)
	@echo "✓ Build complete!"
	@echo ""
	@echo "Note: If you see SSL-related warnings, the binaries may"
	@echo "      still work if your router has OpenSSL libraries."

# Prepare build environment
prep:
	@echo "Preparing build environment..."
	@if [ ! -f lib/ssl_stub.h ]; then \
		$(MAKE) -f Makefile.mipsel-simple ssl-stub; \
	fi

# Create SSL stub headers if needed
ssl-stub:
	@echo "Creating SSL stub headers..."
	@mkdir -p lib/openssl
	@cat > lib/openssl/ssl.h << 'EOF'
#ifndef SSL_STUB_H
#define SSL_STUB_H
typedef void SSL;
typedef void SSL_CTX;
typedef void BIO;
#define SSL_library_init()
#define SSL_load_error_strings()
#define OpenSSL_add_all_algorithms()
#define EVP_cleanup()
#define ERR_free_strings()
#define TLS_client_method() NULL
#define SSL_CTX_new(x) NULL
#define SSL_CTX_free(x)
#define SSL_CTX_set_verify(x,y,z)
#define SSL_VERIFY_NONE 0
#define SSL_new(x) NULL
#define SSL_free(x)
#define SSL_set_fd(x,y) 1
#define SSL_connect(x) 1
#define SSL_write(x,y,z) write(socket_fd,y,z)
#define SSL_read(x,y,z) read(socket_fd,y,z)
#define SSL_get_error(x,y) 0
#define SSL_ERROR_WANT_READ 2
#define SSL_ERROR_WANT_WRITE 3
#endif
EOF
	@cp lib/openssl/ssl.h lib/openssl/bio.h
	@cp lib/openssl/ssl.h lib/openssl/err.h
	@echo "✓ Stub headers created"

# Modified compilation with fallback
%.o: %.c
	@echo "  CC    $<"
	@$(CC) $(CFLAGS) -c $< -o $@ 2>/dev/null || \
	 $(CC) $(CFLAGS) -I./lib -c $< -o $@

libcloudflare.a: $(LIB_OBJECTS)
	@echo "  AR    $@"
	@$(AR) rcs $@ $^

# Build with SSL library fallback
cloudflare_renew: cloudflare_renew.o libcloudflare.a
	@echo "  LD    $@"
	@$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< -L. -lcloudflare $(LIBS_WITH_SSL) 2>/dev/null || \
	 $(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< -L. -lcloudflare $(LIBS)

tools/getip: tools/getip.o libcloudflare.a
	@echo "  LD    $@"
	@$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< -L. -lcloudflare $(LIBS_WITH_SSL) 2>/dev/null || \
	 $(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< -L. -lcloudflare $(LIBS)

tools/setip: tools/setip.o libcloudflare.a
	@echo "  LD    $@"
	@$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< -L. -lcloudflare $(LIBS_WITH_SSL) 2>/dev/null || \
	 $(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< -L. -lcloudflare $(LIBS)

tools/publicip: tools/publicip.o libcloudflare.a
	@echo "  LD    $@"
	@$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< -L. -lcloudflare $(LIBS_WITH_SSL) 2>/dev/null || \
	 $(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< -L. -lcloudflare $(LIBS)

clean:
	rm -f $(PROGRAMS) $(LIB_OBJECTS) *.o tools/*.o libcloudflare.a
	rm -rf lib/openssl

strip: $(PROGRAMS)
	$(STRIP) $(PROGRAMS)
	@echo "✓ Binaries stripped"