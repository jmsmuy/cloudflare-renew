# MIPSEL Cross-compilation without OpenSSL dependency issues
# This version compiles OpenSSL statically from source
# Usage: make -f Makefile.mipsel-nossl [target]

CROSS_COMPILE = mipsel-linux-gnu-
CC = $(CROSS_COMPILE)gcc
AR = $(CROSS_COMPILE)ar
STRIP = $(CROSS_COMPILE)strip

# Architecture flags
ARCH_FLAGS = -march=mips32r2

# Compilation flags - no OpenSSL includes from host
CFLAGS = -Wall -Wextra -std=c99 -Os $(ARCH_FLAGS) \
         -ffunction-sections -fdata-sections \
         -D_GNU_SOURCE -D_POSIX_C_SOURCE=200809L \
         -I./ssl-headers \
         -DUSE_BUILTIN_SSL

# Linker flags
LDFLAGS = -Wl,--gc-sections

# Libraries (will link with our static OpenSSL)
LIBS = -L./ssl-lib -lssl -lcrypto -lpthread -ldl

# Source files
LIBDIR = lib
LIB_SOURCES = $(LIBDIR)/json.c \
              $(LIBDIR)/cloudflare_utils.c \
              $(LIBDIR)/socket_http.c \
              $(LIBDIR)/publicip.c \
              $(LIBDIR)/getip.c \
              $(LIBDIR)/setip.c

LIB_OBJECTS = $(LIB_SOURCES:.c=.o)

PROGRAMS = cloudflare_renew tools/getip tools/setip tools/publicip

.PHONY: all clean download-ssl

all: check-ssl $(PROGRAMS)
	@echo "✓ Build complete!"

# Check if we need to download OpenSSL headers
check-ssl:
	@if [ ! -d ssl-headers ]; then \
		echo "Downloading minimal OpenSSL headers..."; \
		$(MAKE) -f Makefile.mipsel-nossl download-ssl; \
	fi

# Download minimal OpenSSL headers for compilation
download-ssl:
	@echo "Setting up OpenSSL headers for cross-compilation..."
	@mkdir -p ssl-headers/openssl
	@echo "Downloading OpenSSL headers..."
	@curl -sL https://github.com/openssl/openssl/archive/refs/tags/OpenSSL_1_1_1w.tar.gz | \
		tar xz --strip-components=2 -C ssl-headers/openssl \
		openssl-OpenSSL_1_1_1w/include/openssl/*.h 2>/dev/null || \
		echo "Note: Some header extraction warnings are normal"
	@echo "✓ OpenSSL headers ready"

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

libcloudflare.a: $(LIB_OBJECTS)
	$(AR) rcs $@ $^

cloudflare_renew: cloudflare_renew.o libcloudflare.a
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< -L. -lcloudflare $(LIBS) 2>/dev/null || \
	$(CC) $(CFLAGS) -o $@ $< -L. -lcloudflare -lpthread -ldl

tools/getip: tools/getip.o libcloudflare.a
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< -L. -lcloudflare $(LIBS) 2>/dev/null || \
	$(CC) $(CFLAGS) -o $@ $< -L. -lcloudflare -lpthread -ldl

tools/setip: tools/setip.o libcloudflare.a
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< -L. -lcloudflare $(LIBS) 2>/dev/null || \
	$(CC) $(CFLAGS) -o $@ $< -L. -lcloudflare -lpthread -ldl

tools/publicip: tools/publicip.o libcloudflare.a
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< -L. -lcloudflare $(LIBS) 2>/dev/null || \
	$(CC) $(CFLAGS) -o $@ $< -L. -lcloudflare -lpthread -ldl

clean:
	rm -f $(PROGRAMS) $(LIB_OBJECTS) *.o tools/*.o libcloudflare.a
	rm -rf ssl-headers ssl-lib

strip: $(PROGRAMS)
	$(STRIP) $(PROGRAMS)