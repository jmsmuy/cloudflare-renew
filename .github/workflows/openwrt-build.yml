name: OpenWrt Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      target:
        description: 'OpenWrt target architecture (e.g., x86_64, arm_cortex-a9, ramips/mk7621)'
        required: false
        default: 'x86_64'
      sdk_version:
        description: 'OpenWrt SDK version (e.g., 23.05.0, 22.03.5)'
        required: false
        default: '24.10.2'

permissions:
  contents: write

jobs:
  build-openwrt:
    name: Build OpenWrt Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ramips]
        subtarget: [mt7621]
        sdk_version: [24.10.2]
        gcc_version: [13.3.0]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build OpenWrt binaries
      run: |
        echo "üî® Building for OpenWrt ${{ matrix.sdk_version }} - ${{ matrix.target }}"
        
        # Create build directory
        mkdir -p build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}
        
        # Create Dockerfile for this specific target
        cat > Dockerfile.openwrt << 'EOF'
        FROM ubuntu:22.04
        
        # Install dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            wget \
            tar \
            xz-utils \
            ca-certificates \
            && rm -rf /var/lib/apt/lists/*
        
        # Set working directory
        WORKDIR /build
        
        # Download and extract OpenWrt SDK
        RUN wget -O openwrt-sdk.tar.xz \
            "https://downloads.openwrt.org/releases/${{ matrix.sdk_version }}/targets/${{ matrix.target }}/${{ matrix.subtarget }}/openwrt-sdk-${{ matrix.sdk_version }}-${{ matrix.target }}-${{ matrix.subtarget }}_gcc-${{ matrix.gcc_version }}_musl.Linux-x86_64.tar.zst" \
            || echo "Failed to download SDK for ${{ matrix.target }}/{{ matrix.subtarget }} on ${{ matrix.sdk_version }}"
        
        # Extract SDK
        RUN tar -xf openwrt-sdk.tar.xz && \
            mv openwrt-sdk-* openwrt-sdk
        
        # Set environment variables
        ENV STAGING_DIR=/build/openwrt-sdk/staging_dir
        ENV TOOLCHAIN_DIR=/build/openwrt-sdk/staging_dir/toolchain-${{ matrix.target }}_gcc-${{ matrix.gcc_version }}_musl
        ENV PATH=$TOOLCHAIN_DIR/bin:$PATH
        
        # Copy source code
        COPY . /build/source
        
        # Build the project
        WORKDIR /build/source
        
        # Set environment variables for the build
        ENV TARGET=${{ matrix.target }}
        ENV TOOLCHAIN_DIR=/build/openwrt-sdk/staging_dir/toolchain-${{ matrix.target }}_gcc-${{ matrix.gcc_version }}_musl
        ENV CC=$(TOOLCHAIN_DIR)/bin/${{ matrix.target }}-openwrt-linux-musl-gcc
        ENV CFLAGS="-Wall -Wextra -std=c99 -O2 -s"
        ENV LIBS="-lcurl"
        
        # Build using OpenWrt toolchain
        RUN make -f Makefile.openwrt clean
        RUN make -f Makefile.openwrt all
        
        # Verify binaries
        RUN file tools/getip tools/setip tools/publicip cloudflare_renew
        
        # Create package
        RUN mkdir -p /build/package
        RUN cp tools/getip tools/setip tools/publicip cloudflare_renew /build/package/
        RUN cp cloudflare.conf.sample /build/package/
        RUN cp README.md LICENSE /build/package/
        RUN cp getip-all.sh setip-all.sh /build/package/
        
        # Copy install script
        RUN cp install-openwrt.sh /build/package/install.sh
        
        RUN chmod +x /build/package/install.sh
        
        # Create tarball
        RUN cd /build && tar -czf cloudflare-renew-openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}.tar.gz package/
        
        # Copy result to host
        RUN cp /build/cloudflare-renew-openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}.tar.gz /build/source/build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/
        EOF
        
        # Build Docker image and run build
        docker build -f Dockerfile.openwrt -t openwrt-builder-${{ matrix.target }}-${{ matrix.sdk_version }} .
        
        # Clean up Docker image
        docker rmi openwrt-builder-${{ matrix.target }}-${{ matrix.sdk_version }}
        
        echo "‚úÖ Build completed for ${{ matrix.target }} on ${{ matrix.sdk_version }}"
        
    - name: Upload OpenWrt binaries
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-binaries-${{ matrix.sdk_version }}-${{ matrix.target }}
        path: build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/
        retention-days: 30
        
    - name: Create release assets
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üì¶ Preparing OpenWrt release assets..."
        
        # Get version
        if [ -f VERSION ]; then
          VERSION="v$(cat VERSION)"
        else
          DATE=$(date +%Y.%m.%d)
          SHORT_SHA=$(git rev-parse --short HEAD)
          VERSION="v${DATE}-${SHORT_SHA}"
        fi
        
        # Check if release exists
        if gh release view "$VERSION" >/dev/null 2>&1; then
          echo "üì§ Uploading OpenWrt binaries to existing release $VERSION"
          
          # Upload each OpenWrt binary package
          for pkg in build/openwrt-*/*.tar.gz; do
            if [ -f "$pkg" ]; then
              echo "üì§ Uploading $pkg..."
              gh release upload "$VERSION" "$pkg" --clobber
            fi
          done
        else
          echo "‚ö†Ô∏è  Release $VERSION does not exist yet. Run the release workflow first."
        fi
        
    - name: Build summary
      run: |
        echo "üèóÔ∏è  OpenWrt Build Summary"
        echo "========================="
        echo "Target: ${{ matrix.target }}"
        echo "SDK Version: ${{ matrix.sdk_version }}"
        echo "Build Status: ‚úÖ Success"
        echo ""
        echo "Built binaries:"
        ls -la build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/
        echo ""
        echo "Package:"
        ls -lh build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/*.tar.gz
