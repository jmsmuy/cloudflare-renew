name: OpenWrt Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      target:
        description: 'OpenWrt target architecture (e.g., x86_64, arm_cortex-a9, ramips/mk7621)'
        required: false
        default: 'x86_64'
      sdk_version:
        description: 'OpenWrt SDK version (e.g., 23.05.0, 22.03.5)'
        required: false
        default: '24.10.2'

permissions:
  contents: write

jobs:
  build-openwrt:
    name: Build OpenWrt Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ramips]
        subtarget: [mt7621]
        sdk_version: [24.10.2]
        gcc_version: [13.3.0]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build OpenWrt binaries
      run: |
        echo "üî® Building for OpenWrt ${{ matrix.sdk_version }} - ${{ matrix.target }}"
        
        # Create build directory
        mkdir -p build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}
        
        # Prepare source files for Docker build
        mkdir -p build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/source
        cp -r lib/ tools/ cloudflare_renew.c Makefile Makefile.openwrt cloudflare.conf.sample README.md LICENSE getip-all.sh setip-all.sh build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/source/
        
        # Create Dockerfile for this specific target
        cat > Dockerfile.openwrt << 'EOF'
        FROM ubuntu:22.04
        
        # Install dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            wget \
            tar \
            xz-utils \
            zstd \
            ca-certificates \
            libncurses5-dev \
            libncursesw5-dev \
            git \
            rsync \
            gawk \
            unzip \
            python3 \
            python3-distutils \
            python3-pip \
            file \
            && rm -rf /var/lib/apt/lists/*
        
        # Set working directory
        WORKDIR /build
        
        # Download and extract OpenWrt SDK
        RUN wget -O openwrt-sdk.tar.zst \
            "https://downloads.openwrt.org/releases/${{ matrix.sdk_version }}/targets/${{ matrix.target }}/${{ matrix.subtarget }}/openwrt-sdk-${{ matrix.sdk_version }}-${{ matrix.target }}-${{ matrix.subtarget }}_gcc-${{ matrix.gcc_version }}_musl.Linux-x86_64.tar.zst" \
            || echo "Failed to download SDK for ${{ matrix.target }}/{{ matrix.subtarget }} on ${{ matrix.sdk_version }}"
        
        # Extract SDK
        RUN tar -xf openwrt-sdk.tar.zst && \
            mv openwrt-sdk-* openwrt-sdk
        
        # Copy source code into container
        COPY . /build/source
        
        # Create package
        RUN mkdir -p openwrt-sdk/package
        RUN mkdir -p openwrt-sdk/package/cloudflare-renew
        RUN mkdir -p openwrt-sdk/package/cloudflare-renew/src
        RUN mkdir -p openwrt-sdk/package/cloudflare-renew/src/lib
        RUN mkdir -p openwrt-sdk/package/cloudflare-renew/src/tools
        RUN mkdir -p openwrt-sdk/package/cloudflare-renew/src/tests

        RUN cp /build/source/cloudflare_renew.c openwrt-sdk/package/cloudflare-renew/src/
        RUN cp /build/source/lib/json.c /build/source/lib/json.h openwrt-sdk/package/cloudflare-renew/src/lib/
        RUN cp /build/source/lib/cloudflare_utils.c /build/source/lib/cloudflare_utils.h openwrt-sdk/package/cloudflare-renew/src/lib/
        RUN cp /build/source/lib/socket_http.c /build/source/lib/socket_http.h openwrt-sdk/package/cloudflare-renew/src/lib/
        RUN cp /build/source/lib/publicip.c /build/source/lib/publicip.h openwrt-sdk/package/cloudflare-renew/src/lib/
        RUN cp /build/source/lib/getip.c /build/source/lib/getip.h openwrt-sdk/package/cloudflare-renew/src/lib/
        RUN cp /build/source/lib/setip.c /build/source/lib/setip.h openwrt-sdk/package/cloudflare-renew/src/lib/
        RUN cp /build/source/lib/http_utils.c /build/source/lib/http_utils.h openwrt-sdk/package/cloudflare-renew/src/lib/
        RUN cp /build/source/tools/getip.c openwrt-sdk/package/cloudflare-renew/src/tools/
        RUN cp /build/source/tools/setip.c openwrt-sdk/package/cloudflare-renew/src/tools/
        RUN cp /build/source/tools/publicip.c openwrt-sdk/package/cloudflare-renew/src/tools/
        RUN cp /build/source/.config openwrt-sdk/.config
        RUN cp /build/source/Makefile.openwrt.inner openwrt-sdk/package/cloudflare-renew/src/Makefile
        RUN cp /build/source/Makefile.openwrt openwrt-sdk/package/cloudflare-renew/Makefile
        
        RUN ./openwrt-sdk/scripts/feeds update cloudflare-renew
        RUN ./openwrt-sdk/scripts/feeds install -a -p cloudflare-renew
        RUN cp /build/source/.config openwrt-sdk/.config
        RUN cd openwrt-sdk && make package/cloudflare-renew/compile V=s
        
        # Create tarball
        RUN cd /build && tar -czf cloudflare-renew-openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}.tar.gz package/
        
        # Copy result to host
        RUN cp /build/cloudflare-renew-openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}.tar.gz /build/source/build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/
        EOF
        
        # Build Docker image and run build
        docker build -f Dockerfile.openwrt -t openwrt-builder-${{ matrix.target }}-${{ matrix.sdk_version }} .
        
        # Clean up Docker image
        docker rmi openwrt-builder-${{ matrix.target }}-${{ matrix.sdk_version }}
        
        echo "‚úÖ Build completed for ${{ matrix.target }}-${{ matrix.subtarget }} on ${{ matrix.sdk_version }}"
        
    - name: Upload OpenWrt binaries
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-binaries-${{ matrix.sdk_version }}-${{ matrix.target }}
        path: build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/
        retention-days: 30
        
    - name: Create release assets
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üì¶ Preparing OpenWrt release assets..."
        
        # Get version
        if [ -f VERSION ]; then
          VERSION="v$(cat VERSION)"
        else
          DATE=$(date +%Y.%m.%d)
          SHORT_SHA=$(git rev-parse --short HEAD)
          VERSION="v${DATE}-${SHORT_SHA}"
        fi
        
        # Check if release exists
        if gh release view "$VERSION" >/dev/null 2>&1; then
          echo "üì§ Uploading OpenWrt binaries to existing release $VERSION"
          
          # Upload each OpenWrt binary package
          for pkg in build/openwrt-*/*.tar.gz; do
            if [ -f "$pkg" ]; then
              echo "üì§ Uploading $pkg..."
              gh release upload "$VERSION" "$pkg" --clobber
            fi
          done
        else
          echo "‚ö†Ô∏è  Release $VERSION does not exist yet. Run the release workflow first."
        fi
        
    - name: Build summary
      run: |
        echo "üèóÔ∏è  OpenWrt Build Summary"
        echo "========================="
        echo "Target: ${{ matrix.target }}"
        echo "SDK Version: ${{ matrix.sdk_version }}"
        echo "Build Status: ‚úÖ Success"
        echo ""
        echo "Built binaries:"
        ls -la build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/
        echo ""
        echo "Package:"
        ls -lh build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/*.tar.gz
