name: OpenWrt Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      target:
        description: 'OpenWrt target architecture (e.g., x86_64, arm_cortex-a9, ramips/mk7621)'
        required: false
        default: 'x86_64'
      sdk_version:
        description: 'OpenWrt SDK version (e.g., 23.05.0, 22.03.5)'
        required: false
        default: '24.10.2'

permissions:
  contents: write

jobs:
  build-openwrt:
    name: Build OpenWrt Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ramips]
        subtarget: [mt7621]
        sdk_version: [24.10.2]
        gcc_version: [13.3.0]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build OpenWrt binaries
      run: |
        echo "üî® Building for OpenWrt ${{ matrix.sdk_version }} - ${{ matrix.target }}"
        
        # Create build directory
        mkdir -p build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}
        
        # Prepare source files for Docker build
        mkdir -p build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/source
        cp -r lib/ tools/ cloudflare_renew.c Makefile Makefile.openwrt cloudflare.conf.sample README.md LICENSE getip-all.sh setip-all.sh build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/source/
        
        # Build Docker image using the dedicated Dockerfile
        docker build \
            --build-arg SDK_URL="https://downloads.openwrt.org/releases/${{ matrix.sdk_version }}/targets/${{ matrix.target }}/${{ matrix.subtarget }}/openwrt-sdk-${{ matrix.sdk_version }}-${{ matrix.target }}-${{ matrix.subtarget }}-gcc-${{ matrix.gcc_version }}_musl.Linux-x86_64.tar.zst" \
            -f Dockerfile.openwrt \
            -t openwrt-builder-${{ matrix.target }}-${{ matrix.sdk_version }} .
        
        # Clean up Docker image
        docker rmi openwrt-builder-${{ matrix.target }}-${{ matrix.sdk_version }}
        
        echo "‚úÖ Build completed for ${{ matrix.target }}-${{ matrix.subtarget }} on ${{ matrix.sdk_version }}"
        
    - name: Upload OpenWrt binaries
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-binaries-${{ matrix.sdk_version }}-${{ matrix.target }}
        path: build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/
        retention-days: 30
        
    - name: Create release assets
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üì¶ Preparing OpenWrt release assets..."
        
        # Get version
        if [ -f VERSION ]; then
          VERSION="v$(cat VERSION)"
        else
          DATE=$(date +%Y.%m.%d)
          SHORT_SHA=$(git rev-parse --short HEAD)
          VERSION="v${DATE}-${SHORT_SHA}"
        fi
        
        # Check if release exists
        if gh release view "$VERSION" >/dev/null 2>&1; then
          echo "üì§ Uploading OpenWrt binaries to existing release $VERSION"
          
          # Upload each OpenWrt binary package
          for pkg in build/openwrt-*/*.tar.gz; do
            if [ -f "$pkg" ]; then
              echo "üì§ Uploading $pkg..."
              gh release upload "$VERSION" "$pkg" --clobber
            fi
          done
        else
          echo "‚ö†Ô∏è  Release $VERSION does not exist yet. Run the release workflow first."
        fi
        
    - name: Build summary
      run: |
        echo "üèóÔ∏è  OpenWrt Build Summary"
        echo "========================="
        echo "Target: ${{ matrix.target }}"
        echo "SDK Version: ${{ matrix.sdk_version }}"
        echo "Build Status: ‚úÖ Success"
        echo ""
        echo "Built binaries:"
        ls -la build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/
        echo ""
        echo "Package:"
        ls -lh build/openwrt-${{ matrix.sdk_version }}-${{ matrix.target }}/*.tar.gz
